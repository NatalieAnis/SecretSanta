# @hsesecretsanta_bot
from pyexpat.errors import messages

import aiogram
import asyncio
import logging
from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command
from aiogram.types import Message
from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder

from colorama import init, Style

init(autoreset=True)


def print_bold(text):
    return f"{Style.BRIGHT}{text}"


logging.basicConfig(level=logging.INFO)
bot = Bot(token='7922973655:AAGKSoXtt49RQYfq14lDE5HHdp6vgBwRJ2M')
dp = Dispatcher()
router = Router()


@router.message(Command('start'))
async def send_welcome(message: Message):
    kb = [
        [
            types.KeyboardButton(text="—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É"),
            types.KeyboardButton(text="–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∏–≥—Ä–µ: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä"),
            types.KeyboardButton(text="–ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã")
        ]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb
    )
    username = message.from_user.username
    await message.answer('–•–æ-—Ö–æ-—Ö–æ, –ø—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã, ' + username + '' + "üé≤", reply_markup=keyboard)


@router.message(F.text.lower() == '–ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã')
async def game_rules(message: Message):
    rules_message = (
        f"{print_bold('–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:')}\n"
        "–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ ‚Äî —ç—Ç–æ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è –Ω–æ–≤–æ–≥–æ–¥–Ω—è—è –∏–≥—Ä–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π —É—á–∞—Å—Ç–Ω–∏–∫–∏ –æ–±–º–µ–Ω–∏–≤–∞—é—Ç—Å—è –ø–æ–¥–∞—Ä–∫–∞–º–∏, –æ—Å—Ç–∞–≤–∞—è—Å—å –ø—Ä–∏ —ç—Ç–æ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–º–∏. "
        "–û–±—ã—á–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç—Å—è –±—é–¥–∂–µ—Ç –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –¥–∞—Ç–∞ –æ–±–º–µ–Ω–∞ —Å—é—Ä–ø—Ä–∏–∑–∞–º–∏. "
        "–í–∞–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: –Ω–∏–∫—Ç–æ –Ω–µ –¥–æ–ª–∂–µ–Ω —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å, –∫—Ç–æ –µ–≥–æ '–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞', –¥–æ –º–æ–º–µ–Ω—Ç–∞ –∏–∫—Å.\n\n"
        f"{print_bold('–ß–µ–º —è –º–æ–≥—É –í–∞–º –ø–æ–º–æ—á—å?')}\n"
        "–°–æ–∑–¥–∞–≤–∞–π –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –∏ –¥–æ–±–∞–≤–ª—è–π —Ç—É–¥–∞ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π. –£ –∫–∞–∂–¥–æ–π –∫–æ–º–Ω–∞—Ç—ã –µ—Å—Ç—å —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä, "
        "–±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫ –Ω–µ–π –¥–æ—Å—Ç—É–ø, —É–∑–Ω–∞—Ç—å —Å–≤–æ–µ–≥–æ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ –∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –µ–≥–æ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –ø–æ–¥–∞—Ä–∫—É."
    )
    await message.answer(rules_message)


@router.message(F.text.lower() == '—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É')
async def game_rules(message: Message):
    import string
    import secrets
    def room_number(file_room_number):
        letters_and_digits = string.ascii_letters + string.digits
        track_number = ''.join(secrets.choice(letters_and_digits) for i in range(10))

        with open(file_room_number, 'a+') as f:
            f.seek(0)
            if track_number not in f.read():
                f.write(track_number + '\n')
                return track_number
            else:
                return room_number(file_room_number)

    file_name = 'room_numbers.txt'
    await message.answer('–£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã: ' + room_number(file_name))
    await message.answer(
        '–ü–æ–∂–∞–π–ª—É—Å—Ç–∞, –¥–æ–±–∞–≤—Ç–µ –≤ –∫–æ–º–Ω–∞—Ç—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∑–∞–ø–∏—Å–∞–≤ –∏—Ö –Ω–∏–∫–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ. –í —Ñ–æ—Ä–º–∞—Ç–µ:\n dobrisanta\n lolkek\n oleniha')


result = {}


@router.message(F.text.lower() == '–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∏–≥—Ä–µ: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä')
async def game_start(message: Message):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä.')


import os


def read_room_numbers(file_path):
    if os.path.exists(file_path):
        with open(file_path, 'r') as file:
            return file.read().splitlines()
        return {}


room_numbers = read_room_numbers('room_numbers.txt')


@router.message(lambda message: message.text in room_numbers)
async def repeat_text(password: Message):
    username = password.from_user.username
    await password.answer(username + ", " + "–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–Ω–∞—Ç—É " + password.text)
    if result[password.from_user.id]:
        await password.answer(f"{username}, —Ç–≤–æ–π —Ç–∞–π–Ω—ã–π —Å–∞–Ω—Ç–∞ - —ç—Ç–æ {result[password.from_user.id][username]}.")

    @router.message(F.text)
    async def players_add(friends: Message):
        await friends.reply('–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–º–Ω–∞—Ç—É. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∏–≥—Ä–µ!')
        list_friends = friends.text.split()
        import random
        def mix(list_friends):
            if len(list_friends) < 2:
                raise ValueError
            santa_list = list_friends.copy()
            random.shuffle(santa_list)
            assignments = {}
            for i in range(len(list_friends)):
                santa = list_friends[i]
                receiver = santa_list[i]
                if santa == receiver:
                    return mix(list_friends)
                assignments[santa] = receiver

        result[friends.from_user.id] = mix(list_friends)
        await friends.reply

async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())